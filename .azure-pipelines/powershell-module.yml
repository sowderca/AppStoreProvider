---
parameters:
    CODE_ANALYSIS: true
    PESTER_TESTS: true
    POWERSHELL_MODULE_NAME: null
    PUBLISH_DOCUMENTATION: true

steps:
  - task: CmdLine@2
    enabled: true
    displayName: 'Install Report Generator'
    name: 'installReportGenerator'
    inputs:
      script: choco install reportgenerator.portable --yes --force 2> nul

  - powershell: '(Import-PowerShellDataFile -Path "./src/*.psd1" | ConvertTo-Json | ConvertFrom-Json) | select -ExpandProperty "RequiredModules" | % { Install-Module -Name $_ -Repository "PSGallery" -F -Scope CurrentUser }'
    enabled: true
    displayName: 'Install dependencies'
    name: 'installModules'

  - powershell: 'Install-Module -Name "Pester" -Repository "PSGallery" -Force -Scope CurrentUser -AllowClobber -SkipPublisherCheck'
    enabled: true
    displayName: 'Install Pester'
    name: 'installPester'

  - powershell: 'Install-Module -Name "PSScriptAnalyzer" -Repository "PSGallery" -Force -Scope CurrentUser -AllowClobber -SkipPublisherCheck'
    enabled: true
    displayName: 'Install PSScriptAnalyzer'
    name: 'installPSScriptAnalyzer'

  - powershell: |
      (Import-PowerShellDataFile -Path "./src/*.psd1" | ConvertTo-Json | ConvertFrom-Json) | select -ExpandProperty "RequiredModules" | % { Import-Module -Name $_ }
      Invoke-ScriptAnalyzer –Path "./src/" –Recurse -ReportSummary
    enabled: true
    displayName: 'Run static code analysis'
    name: 'psScriptAnalyzer'
  - powershell: 'Invoke-Pester -Script ./tests/*.ps1 -CodeCoverage ./src/**/*.ps1 -CodeCoverageOutputFile coverage.xml -CodeCoverageOutputFileFormat JaCoCo -EnableExit -Strict -OutputFile test-results.xml -OutputFormat NUnitXml'
    name: 'invokePester'
    displayName: 'Run unit tests'
    enabled: true

  - powershell: |
      echo "Releasing - $env:MODULE_NAME v $env:BUILD_VERSION"
      $manifest = Test-ModuleManifest -Path ./src/$env:MODULE_NAME.psd1
      (Get-Content -Path "./src/$($env:MODULE_NAME).psd1") -replace ($manifest.Version -as [string]), "$($env:BUILD_VERSION)" | Out-File -FilePath "./src/$($env:MODULE_NAME).psd1"
      (Get-Content -Path "./$($env:MODULE_NAME).nuspec") -replace ($manifest.Version -as [string]), "$($env:BUILD_VERSION)" | Out-File -FilePath "./$($env:MODULE_NAME).nuspec"
    enabled: true
    name: 'bumpVersion'
    displayName: 'Bump version'
    env:
      BUILD_VERSION: $(Build.BuildNumber)
      MODULE_NAME: ${{ parameters.POWERSHELL_MODULE_NAME }}
  - task: CmdLine@2
    inputs:
      script: reportgenerator -reports:coverage.xml -targetdir:coverage -sourcedirs:src -reporttypes:HtmlInline_AzurePipelines_Dark
    enabled: true
    name: 'generateReport'
    displayName: 'Generate coverage report'
    continueOnError: true

  - task: CmdLine@2
    inputs:
      script: |
        git config user.email "azure-pipelines@microsoft.com"
        git config user.name "Azure Pipelines"
        git add --all
        git commit -m "Release [skip ci]"
        git push origin HEAD:master  2> nul
    enabled: true
    continueOnError: false
    name: 'gitCommit'
    displayName: 'Push version updates'

  - task: NuGetCommand@2
    displayName: 'Package module'
    name: 'nugetPackCopy'
    inputs:
      command: pack
      packDestination: $(Build.ArtifactStagingDirectory)
      packagesToPack: '*.nuspec'

  - task: NuGetCommand@2
    displayName: 'Publish module'
    inputs:
      command: push
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      publishVstsFeed: 'packages'

  - task: PublishTestResults@2
    enabled: true
    name:  'publishTestResults'
    displayName: 'Publish test results'
    inputs:
      testRunner: NUnit
      testResultsFiles: 'test-results.xml'
      publishRunAttachments: true
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    enabled: true
    name: 'publishCoverageResults'
    displayName: 'Publish code coverage'
    inputs:
      summaryFileLocation: 'coverage.xml'
      reportDirectory: coverage/*
      codeCoverageTool: JaCoCo
      additionalCodeCoverageFiles: coverage/*
    condition: and(succeededOrFailed(), eq(variables['System.PullRequest.IsFork'], false))

  - task: PowerShell@2
    enabled: true
    displayName: 'Generate module documentation'
    name: 'generateDocs'
    inputs:
      pwsh: true
      filePath: './scripts/generateDocs.ps1'
      targetType: filePath
    env:
      BUILD_VERSION: $(Build.BuildNumber)
      MODULE_NAME: ${{ parameters.POWERSHELL_MODULE_NAME }}
      REQUIRED_MODULES: ${{ parameters.REQUIRED_POWERSHELL_MODULES }}
